diff --git a/src/components/manage/Form/Form.jsx b/src/components/manage/Form/Form.jsx
index e1f11187..1eee91f2 100644
--- a/src/components/manage/Form/Form.jsx
+++ b/src/components/manage/Form/Form.jsx
@@ -31,17 +31,20 @@ import { v4 as uuid } from 'uuid';
 import { Portal } from 'react-portal';
 
 import { EditBlock, Icon, Field } from '@plone/volto/components';
+import { settings } from '~/config';
 import dragSVG from '@plone/volto/icons/drag.svg';
 
 import {
   getBlocksFieldname,
   getBlocksLayoutFieldname,
+  blockHasValue,
 } from '@plone/volto/helpers';
 import { difference } from '@plone/volto/helpers';
 
 import aheadSVG from '@plone/volto/icons/ahead.svg';
 import clearSVG from '@plone/volto/icons/clear.svg';
 import { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';
+import { FormStateContext, FormStateProvider } from './FormContext';
 
 const messages = defineMessages({
   addBlock: {
@@ -155,6 +158,7 @@ class Form extends Component {
       title: uuid(),
       text: uuid(),
     };
+
     let { formData } = props;
     const blocksFieldname = getBlocksFieldname(formData);
     const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);
@@ -166,6 +170,7 @@ class Form extends Component {
         ...formData,
       };
     }
+
     // defaults for block editor; should be moved to schema on server side
     // Adding fallback in case the fields are empty, so we are sure that the edit form
     // shows at least the default blocks
@@ -187,11 +192,12 @@ class Form extends Component {
             '@type': 'title',
           },
           [ids.text]: {
-            '@type': 'text',
+            '@type': settings.defaultBlockType,
           },
         };
       }
     }
+
     this.state = {
       formData,
       initialFormData: { ...formData },
@@ -203,6 +209,7 @@ class Form extends Component {
           : null,
       placeholderProps: {},
     };
+
     this.onChangeField = this.onChangeField.bind(this);
     this.onChangeBlock = this.onChangeBlock.bind(this);
     this.onMutateBlock = this.onMutateBlock.bind(this);
@@ -214,6 +221,11 @@ class Form extends Component {
     this.onFocusPreviousBlock = this.onFocusPreviousBlock.bind(this);
     this.onFocusNextBlock = this.onFocusNextBlock.bind(this);
     this.handleKeyDown = this.handleKeyDown.bind(this);
+
+    // We use these as instance fields, to be initialized in the render() meth
+    // from the context provider
+    this.contextData = null;
+    this.setContextData = null;
   }
 
   /**
@@ -224,9 +236,9 @@ class Form extends Component {
    * @returns {undefined}
    */
   onChangeField(id, value) {
-    this.setState({
+    this.setContextData({
       formData: {
-        ...this.state.formData,
+        ...this.contextData.formData,
         // We need to catch also when the value equals false this fixes #888
         [id]: value || (value !== undefined && isBoolean(value)) ? value : null,
       },
@@ -234,11 +246,7 @@ class Form extends Component {
   }
 
   hideHandler = (data) => {
-    return (
-      data['@type'] === 'text' &&
-      (!data.text ||
-        (data.text?.blocks?.length === 1 && data.text.blocks[0].text === ''))
-    );
+    return !blockHasValue(data);
   };
 
   /**
@@ -249,12 +257,13 @@ class Form extends Component {
    * @returns {undefined}
    */
   onChangeBlock(id, value) {
-    const blocksFieldname = getBlocksFieldname(this.state.formData);
-    this.setState({
+    const { formData } = this.contextData;
+    const blocksFieldname = getBlocksFieldname(formData);
+    this.setContextData({
       formData: {
-        ...this.state.formData,
+        ...formData,
         [blocksFieldname]: {
-          ...this.state.formData[blocksFieldname],
+          ...formData[blocksFieldname],
           [id]: value || null,
         },
       },
@@ -270,26 +279,26 @@ class Form extends Component {
    */
   onMutateBlock(id, value) {
     const idTrailingBlock = uuid();
-    const blocksFieldname = getBlocksFieldname(this.state.formData);
-    const blocksLayoutFieldname = getBlocksLayoutFieldname(this.state.formData);
-    const index =
-      this.state.formData[blocksLayoutFieldname].items.indexOf(id) + 1;
+    const { formData } = this.contextData;
+    const blocksFieldname = getBlocksFieldname(formData);
+    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);
+    const index = formData[blocksLayoutFieldname].items.indexOf(id) + 1;
 
-    this.setState({
+    this.setContextData({
       formData: {
-        ...this.state.formData,
+        ...formData,
         [blocksFieldname]: {
-          ...this.state.formData[blocksFieldname],
+          ...formData[blocksFieldname],
           [id]: value || null,
           [idTrailingBlock]: {
-            '@type': 'text',
+            '@type': settings.defaultBlockType,
           },
         },
         [blocksLayoutFieldname]: {
           items: [
-            ...this.state.formData[blocksLayoutFieldname].items.slice(0, index),
+            ...formData[blocksLayoutFieldname].items.slice(0, index),
             idTrailingBlock,
-            ...this.state.formData[blocksLayoutFieldname].items.slice(index),
+            ...formData[blocksLayoutFieldname].items.slice(index),
           ],
         },
       },
@@ -303,7 +312,7 @@ class Form extends Component {
    * @returns {undefined}
    */
   onSelectBlock(id) {
-    this.setState({
+    this.setContextData({
       selected: id,
     });
   }
@@ -316,22 +325,23 @@ class Form extends Component {
    * @returns {undefined}
    */
   onDeleteBlock(id, selectPrev) {
-    const blocksFieldname = getBlocksFieldname(this.state.formData);
-    const blocksLayoutFieldname = getBlocksLayoutFieldname(this.state.formData);
+    const { formData } = this.contextData;
+    const blocksFieldname = getBlocksFieldname(formData);
+    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);
 
-    this.setState({
+    this.setContextData({
+      selected: selectPrev
+        ? formData[blocksLayoutFieldname].items[
+            formData[blocksLayoutFieldname].items.indexOf(id) - 1
+          ]
+        : null,
       formData: {
-        ...this.state.formData,
+        ...formData,
         [blocksLayoutFieldname]: {
-          items: without(this.state.formData[blocksLayoutFieldname].items, id),
+          items: without(formData[blocksLayoutFieldname].items, id),
         },
-        [blocksFieldname]: omit(this.state.formData[blocksFieldname], [id]),
+        [blocksFieldname]: omit(formData[blocksFieldname], [id]),
       },
-      selected: selectPrev
-        ? this.state.formData[blocksLayoutFieldname].items[
-            this.state.formData[blocksLayoutFieldname].items.indexOf(id) - 1
-          ]
-        : null,
     });
   }
 
@@ -345,38 +355,36 @@ class Form extends Component {
   onAddBlock(type, index) {
     const id = uuid();
     const idTrailingBlock = uuid();
-    const blocksFieldname = getBlocksFieldname(this.state.formData);
-    const blocksLayoutFieldname = getBlocksLayoutFieldname(this.state.formData);
-    const totalItems = this.state.formData[blocksLayoutFieldname].items.length;
+    const { formData } = this.contextData;
+    const blocksFieldname = getBlocksFieldname(formData);
+    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);
+    const totalItems = formData[blocksLayoutFieldname].items.length;
     const insert = index === -1 ? totalItems : index;
 
-    this.setState({
+    this.setContextData({
+      selected: id,
       formData: {
-        ...this.state.formData,
+        ...formData,
         [blocksLayoutFieldname]: {
           items: [
-            ...this.state.formData[blocksLayoutFieldname].items.slice(
-              0,
-              insert,
-            ),
+            ...formData[blocksLayoutFieldname].items.slice(0, insert),
             id,
-            ...(type !== 'text' ? [idTrailingBlock] : []),
-            ...this.state.formData[blocksLayoutFieldname].items.slice(insert),
+            ...(type !== settings.defaultBlockType ? [idTrailingBlock] : []),
+            ...formData[blocksLayoutFieldname].items.slice(insert),
           ],
         },
         [blocksFieldname]: {
-          ...this.state.formData[blocksFieldname],
+          ...formData[blocksFieldname],
           [id]: {
             '@type': type,
           },
-          ...(type !== 'text' && {
+          ...(type !== settings.defaultBlockType && {
             [idTrailingBlock]: {
-              '@type': 'text',
+              '@type': settings.defaultBlockType,
             },
           }),
         },
       },
-      selected: id,
     });
 
     return id;
@@ -392,11 +400,12 @@ class Form extends Component {
     if (event) {
       event.preventDefault();
     }
+    const { formData } = this.contextData;
     const errors = {};
     map(this.props.schema.fieldsets, (fieldset) =>
       map(fieldset.fields, (fieldId) => {
         const field = this.props.schema.properties[fieldId];
-        var data = this.state.formData[fieldId];
+        var data = formData[fieldId];
         if (typeof data === 'string' || data instanceof String) {
           data = data.trim();
         }
@@ -425,7 +434,7 @@ class Form extends Component {
       }),
     );
     if (keys(errors).length > 0) {
-      this.setState({
+      this.setContextData({
         errors,
       });
     } else {
@@ -434,10 +443,10 @@ class Form extends Component {
       if (this.props.isEditForm) {
         this.props.onSubmit(this.getOnlyFormModifiedValues());
       } else {
-        this.props.onSubmit(this.state.formData);
+        this.props.onSubmit(formData);
       }
       if (this.props.resetAfterSubmit) {
-        this.setState({
+        this.setContextData({
           formData: this.props.formData,
         });
       }
@@ -454,12 +463,11 @@ class Form extends Component {
    * @returns {undefined}
    */
   getOnlyFormModifiedValues = () => {
+    const { formData } = this.contextData;
     const fieldsModified = Object.keys(
-      difference(this.state.formData, this.state.initialFormData),
-    );
-    return pickBy(this.state.formData, (value, key) =>
-      fieldsModified.includes(key),
+      difference(formData, this.state.initialFormData),
     );
+    return pickBy(formData, (value, key) => fieldsModified.includes(key));
   };
 
   /**
@@ -470,14 +478,15 @@ class Form extends Component {
    * @returns {undefined}
    */
   onMoveBlock(dragIndex, hoverIndex) {
-    const blocksLayoutFieldname = getBlocksLayoutFieldname(this.state.formData);
+    const { formData } = this.contextData;
+    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);
 
-    this.setState({
+    this.setContextData({
       formData: {
-        ...this.state.formData,
+        ...formData,
         [blocksLayoutFieldname]: {
           items: move(
-            this.state.formData[blocksLayoutFieldname].items,
+            formData[blocksLayoutFieldname].items,
             dragIndex,
             hoverIndex,
           ),
@@ -494,10 +503,11 @@ class Form extends Component {
    * @returns {undefined}
    */
   onFocusPreviousBlock(currentBlock, blockNode) {
-    const blocksLayoutFieldname = getBlocksLayoutFieldname(this.state.formData);
-    const currentIndex = this.state.formData[
-      blocksLayoutFieldname
-    ].items.indexOf(currentBlock);
+    const { formData } = this.contextData;
+    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);
+    const currentIndex = formData[blocksLayoutFieldname].items.indexOf(
+      currentBlock,
+    );
 
     if (currentIndex === 0) {
       // We are already at the top block don't do anything
@@ -506,9 +516,7 @@ class Form extends Component {
     const newindex = currentIndex - 1;
     blockNode.blur();
 
-    this.onSelectBlock(
-      this.state.formData[blocksLayoutFieldname].items[newindex],
-    );
+    this.onSelectBlock(formData[blocksLayoutFieldname].items[newindex]);
   }
 
   /**
@@ -519,15 +527,13 @@ class Form extends Component {
    * @returns {undefined}
    */
   onFocusNextBlock(currentBlock, blockNode) {
-    const blocksLayoutFieldname = getBlocksLayoutFieldname(this.state.formData);
-    const currentIndex = this.state.formData[
-      blocksLayoutFieldname
-    ].items.indexOf(currentBlock);
+    const { formData } = this.contextData;
+    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);
+    const currentIndex = formData[blocksLayoutFieldname].items.indexOf(
+      currentBlock,
+    );
 
-    if (
-      currentIndex ===
-      this.state.formData[blocksLayoutFieldname].items.length - 1
-    ) {
+    if (currentIndex === formData[blocksLayoutFieldname].items.length - 1) {
       // We are already at the bottom block don't do anything
       return;
     }
@@ -535,9 +541,7 @@ class Form extends Component {
     const newindex = currentIndex + 1;
     blockNode.blur();
 
-    this.onSelectBlock(
-      this.state.formData[blocksLayoutFieldname].items[newindex],
-    );
+    this.onSelectBlock(formData[blocksLayoutFieldname].items[newindex]);
   }
 
   /**
@@ -570,7 +574,7 @@ class Form extends Component {
       e.preventDefault();
     }
     if (e.key === 'Enter' && !disableEnter) {
-      this.onAddBlock('text', index + 1);
+      this.onAddBlock(settings.defaultBlockType, index + 1);
       e.preventDefault();
     }
   }
@@ -607,16 +611,17 @@ class Form extends Component {
     if (!destination) {
       return;
     }
-    const blocksLayoutFieldname = getBlocksLayoutFieldname(this.state.formData);
+    const { formData } = this.contextData;
+    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);
     this.setState({
       placeholderProps: {},
     });
-    this.setState({
+    this.setContextData({
       formData: {
-        ...this.state.formData,
+        ...formData,
         [blocksLayoutFieldname]: {
           items: move(
-            this.state.formData[blocksLayoutFieldname].items,
+            formData[blocksLayoutFieldname].items,
             source.index,
             destination.index,
           ),
@@ -711,252 +716,308 @@ class Form extends Component {
    */
   render() {
     const { schema: originalSchema, onCancel, onSubmit } = this.props;
-    const { formData, placeholderProps } = this.state;
-    const blocksFieldname = getBlocksFieldname(formData);
-    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);
-    const renderBlocks = formData?.[blocksLayoutFieldname]?.items;
-    const blocksDict = formData?.[blocksFieldname];
     const schema = this.removeBlocksLayoutFields(originalSchema);
+    const { placeholderProps } = this.state;
 
-    return this.props.visual ? (
-      // Removing this from SSR is important, since react-beautiful-dnd supports SSR,
-      // but draftJS don't like it much and the hydration gets messed up
-      !__SERVER__ && (
-        <div className="ui container">
-          <DragDropContext
-            onDragEnd={this.onDragEnd}
-            onDragStart={this.handleDragStart}
-            onDragUpdate={this.onDragUpdate}
-          >
-            <Droppable droppableId="edit-form">
-              {(provided, snapshot) => (
-                <div
-                  ref={provided.innerRef}
-                  {...provided.droppableProps}
-                  style={{ position: 'relative' }}
-                >
-                  {map(renderBlocks, (block, index) => (
-                    <Draggable draggableId={block} index={index} key={block}>
-                      {(provided) => (
+    const updateContext = ({ setContextData, contextData }) => {
+      this.setContextData = setContextData;
+      this.contextData = contextData;
+    };
+
+    return (
+      <FormStateProvider initialValue={this.state}>
+        <FormStateContext.Consumer>
+          {({ setContextData, contextData }) => {
+            updateContext({ setContextData, contextData });
+
+            const { formData } = contextData;
+
+            const blocksFieldname = getBlocksFieldname(formData);
+            const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);
+            const renderBlocks = formData?.[blocksLayoutFieldname]?.items;
+            const blocksDict = formData?.[blocksFieldname];
+
+            return this.props.visual ? (
+              // Removing this from SSR is important, since react-beautiful-dnd supports SSR,
+              // but draftJS don't like it much and the hydration gets messed up
+              !__SERVER__ && (
+                <div className="ui container">
+                  <DragDropContext
+                    onDragEnd={this.onDragEnd}
+                    onDragStart={this.handleDragStart}
+                    onDragUpdate={this.onDragUpdate}
+                  >
+                    <Droppable droppableId="edit-form">
+                      {(provided, snapshot) => (
                         <div
                           ref={provided.innerRef}
-                          {...provided.draggableProps}
-                          className={`block-editor-${blocksDict[block]['@type']}`}
+                          {...provided.droppableProps}
+                          style={{ position: 'relative' }}
                         >
-                          <div style={{ position: 'relative' }}>
+                          {map(renderBlocks, (block, index) => (
+                            <Draggable
+                              draggableId={block}
+                              index={index}
+                              key={block}
+                            >
+                              {(provided) => (
+                                <div
+                                  ref={provided.innerRef}
+                                  {...provided.draggableProps}
+                                  className={`block-editor-${blocksDict[block]['@type']}`}
+                                >
+                                  <div style={{ position: 'relative' }}>
+                                    <div
+                                      style={{
+                                        visibility:
+                                          contextData.selected === block &&
+                                          !this.hideHandler(blocksDict[block])
+                                            ? 'visible'
+                                            : 'hidden',
+                                        display: 'inline-block',
+                                      }}
+                                      {...provided.dragHandleProps}
+                                      className="drag handle wrapper"
+                                    >
+                                      <Icon name={dragSVG} size="18px" />
+                                    </div>
+
+                                    <EditBlock
+                                      id={block}
+                                      index={index}
+                                      type={blocksDict[block]['@type']}
+                                      key={block}
+                                      handleKeyDown={this.handleKeyDown}
+                                      onAddBlock={this.onAddBlock}
+                                      onChangeBlock={this.onChangeBlock}
+                                      onMutateBlock={this.onMutateBlock}
+                                      onChangeField={this.onChangeField}
+                                      onDeleteBlock={this.onDeleteBlock}
+                                      onSelectBlock={this.onSelectBlock}
+                                      onMoveBlock={this.onMoveBlock}
+                                      onFocusPreviousBlock={
+                                        this.onFocusPreviousBlock
+                                      }
+                                      onFocusNextBlock={this.onFocusNextBlock}
+                                      data={blocksDict[block]}
+                                      pathname={this.props.pathname}
+                                      block={block}
+                                      selected={contextData.selected === block}
+                                      properties={formData}
+                                    />
+                                  </div>
+                                </div>
+                              )}
+                            </Draggable>
+                          ))}
+                          {provided.placeholder}
+                          {!isEmpty(placeholderProps) && (
                             <div
                               style={{
-                                visibility:
-                                  this.state.selected === block &&
-                                  !this.hideHandler(blocksDict[block])
-                                    ? 'visible'
-                                    : 'hidden',
-                                display: 'inline-block',
+                                position: 'absolute',
+                                top: `${placeholderProps.clientY}px`,
+                                height: `${
+                                  placeholderProps.clientHeight + 18
+                                }px`,
+                                background: '#eee',
+                                width: `${placeholderProps.clientWidth}px`,
+                                borderRadius: '3px',
                               }}
-                              {...provided.dragHandleProps}
-                              className="drag handle wrapper"
-                            >
-                              <Icon name={dragSVG} size="18px" />
-                            </div>
-
-                            <EditBlock
-                              id={block}
-                              index={index}
-                              type={blocksDict[block]['@type']}
-                              key={block}
-                              handleKeyDown={this.handleKeyDown}
-                              onAddBlock={this.onAddBlock}
-                              onChangeBlock={this.onChangeBlock}
-                              onMutateBlock={this.onMutateBlock}
-                              onChangeField={this.onChangeField}
-                              onDeleteBlock={this.onDeleteBlock}
-                              onSelectBlock={this.onSelectBlock}
-                              onMoveBlock={this.onMoveBlock}
-                              onFocusPreviousBlock={this.onFocusPreviousBlock}
-                              onFocusNextBlock={this.onFocusNextBlock}
-                              properties={formData}
-                              data={blocksDict[block]}
-                              pathname={this.props.pathname}
-                              block={block}
-                              selected={this.state.selected === block}
                             />
-                          </div>
+                          )}
                         </div>
                       )}
-                    </Draggable>
-                  ))}
-                  {provided.placeholder}
-                  {!isEmpty(placeholderProps) && (
-                    <div
-                      style={{
-                        position: 'absolute',
-                        top: `${placeholderProps.clientY}px`,
-                        height: `${placeholderProps.clientHeight + 18}px`,
-                        background: '#eee',
-                        width: `${placeholderProps.clientWidth}px`,
-                        borderRadius: '3px',
-                      }}
-                    />
-                  )}
+                    </Droppable>
+                    <Portal
+                      node={
+                        __CLIENT__ &&
+                        document.getElementById('sidebar-metadata')
+                      }
+                    >
+                      <UiForm
+                        method="post"
+                        onSubmit={this.onSubmit}
+                        error={keys(contextData.errors).length > 0}
+                      >
+                        {schema &&
+                          map(schema.fieldsets, (item) => [
+                            <Segment secondary attached key={item.title}>
+                              {item.title}
+                            </Segment>,
+                            <Segment
+                              attached
+                              key={`fieldset-contents-${item.title}`}
+                            >
+                              {map(item.fields, (field, index) => (
+                                <Field
+                                  {...schema.properties[field]}
+                                  id={field}
+                                  focus={false}
+                                  value={contextData[field]}
+                                  required={
+                                    schema.required.indexOf(field) !== -1
+                                  }
+                                  onChangeField={this.onChangeField}
+                                  key={field}
+                                  error={contextData.errors[field]}
+                                />
+                              ))}
+                            </Segment>,
+                          ])}
+                      </UiForm>
+                    </Portal>
+                  </DragDropContext>
                 </div>
-              )}
-            </Droppable>
-            <Portal
-              node={__CLIENT__ && document.getElementById('sidebar-metadata')}
-            >
-              <UiForm
-                method="post"
-                onSubmit={this.onSubmit}
-                error={keys(this.state.errors).length > 0}
-              >
-                {schema &&
-                  map(schema.fieldsets, (item) => [
-                    <Segment secondary attached key={item.title}>
-                      {item.title}
-                    </Segment>,
-                    <Segment attached key={`fieldset-contents-${item.title}`}>
-                      {map(item.fields, (field, index) => (
-                        <Field
-                          {...schema.properties[field]}
-                          id={field}
-                          focus={false}
-                          value={this.state.formData[field]}
-                          required={schema.required.indexOf(field) !== -1}
-                          onChange={this.onChangeField}
-                          key={field}
-                          error={this.state.errors[field]}
-                        />
-                      ))}
-                    </Segment>,
-                  ])}
-              </UiForm>
-            </Portal>
-          </DragDropContext>
-        </div>
-      )
-    ) : (
-      <Container>
-        <UiForm
-          method="post"
-          onSubmit={this.onSubmit}
-          error={keys(this.state.errors).length > 0}
-        >
-          <Segment.Group raised>
-            {schema && schema.fieldsets.length > 1 && (
-              <Tab
-                menu={{
-                  secondary: true,
-                  pointing: true,
-                  attached: true,
-                  tabular: true,
-                  className: 'formtabs',
-                }}
-                panes={map(schema.fieldsets, (item) => ({
-                  menuItem: item.title,
-                  render: () => [
-                    this.props.title && (
-                      <Segment secondary attached key={this.props.title}>
-                        {this.props.title}
-                      </Segment>
-                    ),
-                    ...map(item.fields, (field, index) => (
-                      <Field
-                        {...schema.properties[field]}
-                        id={field}
-                        fieldSet={item.title.toLowerCase()}
-                        focus={index === 0}
-                        value={this.state.formData[field]}
-                        required={schema.required.indexOf(field) !== -1}
-                        onChange={this.onChangeField}
-                        key={field}
-                        error={this.state.errors[field]}
+              )
+            ) : (
+              <Container>
+                <UiForm
+                  method="post"
+                  onSubmit={this.onSubmit}
+                  error={keys(contextData.errors).length > 0}
+                >
+                  <Segment.Group raised>
+                    {schema && schema.fieldsets.length > 1 && (
+                      <Tab
+                        menu={{
+                          secondary: true,
+                          pointing: true,
+                          attached: true,
+                          tabular: true,
+                          className: 'formtabs',
+                        }}
+                        panes={map(schema.fieldsets, (item) => ({
+                          menuItem: item.title,
+                          render: () => [
+                            this.props.title && (
+                              <Segment
+                                secondary
+                                attached
+                                key={this.props.title}
+                              >
+                                {this.props.title}
+                              </Segment>
+                            ),
+                            ...map(item.fields, (field, index) => (
+                              <Field
+                                {...schema.properties[field]}
+                                id={field}
+                                fieldSet={item.title.toLowerCase()}
+                                focus={index === 0}
+                                value={contextData[field]}
+                                required={schema.required.indexOf(field) !== -1}
+                                onChangeField={this.onChangeField}
+                                key={field}
+                                error={contextData.errors[field]}
+                              />
+                            )),
+                          ],
+                        }))}
                       />
-                    )),
-                  ],
-                }))}
-              />
-            )}
-            {schema && schema.fieldsets.length === 1 && (
-              <Segment>
-                {this.props.title && (
-                  <Segment className="primary">{this.props.title}</Segment>
-                )}
-                {this.props.description && (
-                  <Segment secondary>{this.props.description}</Segment>
-                )}
-                {keys(this.state.errors).length > 0 && (
-                  <Message
-                    icon="warning"
-                    negative
-                    attached
-                    header={this.props.intl.formatMessage(messages.error)}
-                    content={this.props.intl.formatMessage(
-                      messages.thereWereSomeErrors,
                     )}
-                  />
-                )}
-                {this.props.error && (
-                  <Message
-                    icon="warning"
-                    negative
-                    attached
-                    header={this.props.intl.formatMessage(messages.error)}
-                    content={this.props.error.message}
-                  />
-                )}
-                {map(schema.fieldsets[0].fields, (field) => (
-                  <Field
-                    {...schema.properties[field]}
-                    id={field}
-                    value={this.state.formData?.[field]}
-                    required={schema.required.indexOf(field) !== -1}
-                    onChange={this.onChangeField}
-                    key={field}
-                    error={this.state.errors[field]}
-                  />
-                ))}
-              </Segment>
-            )}
-            {!this.props.hideActions && (
-              <Segment className="actions" clearing>
-                {onSubmit && (
-                  <Button
-                    basic
-                    primary
-                    floated="right"
-                    type="submit"
-                    aria-label={
-                      this.props.submitLabel
-                        ? this.props.submitLabel
-                        : this.props.intl.formatMessage(messages.save)
-                    }
-                    title={
-                      this.props.submitLabel
-                        ? this.props.submitLabel
-                        : this.props.intl.formatMessage(messages.save)
-                    }
-                    loading={this.props.loading}
-                  >
-                    <Icon className="circled" name={aheadSVG} size="30px" />
-                  </Button>
-                )}
-                {onCancel && (
-                  <Button
-                    basic
-                    secondary
-                    aria-label={this.props.intl.formatMessage(messages.cancel)}
-                    title={this.props.intl.formatMessage(messages.cancel)}
-                    floated="right"
-                    onClick={onCancel}
-                  >
-                    <Icon className="circled" name={clearSVG} size="30px" />
-                  </Button>
-                )}
-              </Segment>
-            )}
-          </Segment.Group>
-        </UiForm>
-      </Container>
+                    {schema && schema.fieldsets.length === 1 && (
+                      <Segment>
+                        {this.props.title && (
+                          <Segment className="primary">
+                            {this.props.title}
+                          </Segment>
+                        )}
+                        {this.props.description && (
+                          <Segment secondary>{this.props.description}</Segment>
+                        )}
+                        {keys(contextData.errors).length > 0 && (
+                          <Message
+                            icon="warning"
+                            negative
+                            attached
+                            header={this.props.intl.formatMessage(
+                              messages.error,
+                            )}
+                            content={this.props.intl.formatMessage(
+                              messages.thereWereSomeErrors,
+                            )}
+                          />
+                        )}
+                        {this.props.error && (
+                          <Message
+                            icon="warning"
+                            negative
+                            attached
+                            header={this.props.intl.formatMessage(
+                              messages.error,
+                            )}
+                            content={this.props.error.message}
+                          />
+                        )}
+                        {map(schema.fieldsets[0].fields, (field) => (
+                          <Field
+                            {...schema.properties[field]}
+                            id={field}
+                            value={contextData?.[field]}
+                            required={schema.required.indexOf(field) !== -1}
+                            onChangeField={this.onChangeField}
+                            key={field}
+                            error={contextData.errors[field]}
+                          />
+                        ))}
+                      </Segment>
+                    )}
+                    {!this.props.hideActions && (
+                      <Segment className="actions" clearing>
+                        {onSubmit && (
+                          <Button
+                            basic
+                            primary
+                            floated="right"
+                            type="submit"
+                            aria-label={
+                              this.props.submitLabel
+                                ? this.props.submitLabel
+                                : this.props.intl.formatMessage(messages.save)
+                            }
+                            title={
+                              this.props.submitLabel
+                                ? this.props.submitLabel
+                                : this.props.intl.formatMessage(messages.save)
+                            }
+                            loading={this.props.loading}
+                          >
+                            <Icon
+                              className="circled"
+                              name={aheadSVG}
+                              size="30px"
+                            />
+                          </Button>
+                        )}
+                        {onCancel && (
+                          <Button
+                            basic
+                            secondary
+                            aria-label={this.props.intl.formatMessage(
+                              messages.cancel,
+                            )}
+                            title={this.props.intl.formatMessage(
+                              messages.cancel,
+                            )}
+                            floated="right"
+                            onClick={onCancel}
+                          >
+                            <Icon
+                              className="circled"
+                              name={clearSVG}
+                              size="30px"
+                            />
+                          </Button>
+                        )}
+                      </Segment>
+                    )}
+                  </Segment.Group>
+                </UiForm>
+              </Container>
+            );
+          }}
+        </FormStateContext.Consumer>
+      </FormStateProvider>
     );
   }
 }
